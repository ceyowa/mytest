jstack -F -l 2864 > d:\aaa.text

jmap -histo:live 2864 > d:\cfaggg.text

jmap -dump:format=b,file=heap.hprof 2576

jmap -dump:format=b,file=/opt/heap.hprof 5

heap文件分析工具：
jvisualvm.exe
jhat

jmap -heap > d:/bb.text 2864


hat -J-Xmx512m <heap dump file>

jstat -gccapacity 2864 >d:\dddccc.text

jstat -options


ps -e|grep java|grep -v grep 显示出所有的java进程，去处掉当前的grep进程。


https://bugs.launchpad.net/ubuntu/+source/openjdk-7/+bug/1548434

GC知识：
http://ifeve.com/useful-jvm-flags-part-6-throughput-collector/

Class文件简介及加载
动态生成Class
JDK动态代理
CGLIB
ASM
Javassist
总结

Javassist 使用指南:
https://www.jianshu.com/p/43424242846b

https://blog.csdn.net/ns_code/article/details/17675609

https://blog.csdn.net/zhangjg_blog/article/details/21486985

logo
http://www.tianshouzhi.com/api/tutorials/bytecode/354

BCEL 简介信息:
http://www.open-open.com/open55054.htm

https://www.ibm.com/developerworks/cn/java/j-dyn0916/index.html

https://www.ibm.com/developerworks/cn/java/j-dyn0916/index.html#h1.1

java中支持脚本:
https://www.ibm.com/developerworks/cn/java/j-javascripting1/index.html
Spring AOP 实现原理与 CGLIB 应用:
https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/index.html
AOP 的利器：ASM 3.0 介绍
https://www.ibm.com/developerworks/cn/java/j-lo-asm30/index.html

https://www.ibm.com/developerworks/cn/java/j-dyn0302/

https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/index.html

https://blog.csdn.net/skiof007/article/details/52806714

https://blog.csdn.net/column/details/zhangjg-java-blog.html

https://www.ibm.com/search?q=Java+%E7%BC%96%E7%A8%8B%E7%9A%84%E5%8A%A8%E6%80%81%E6%80%A7&v=18&en=utf&lang=zh&cc=cn&sn=dw&dws=cndw&hpp=20

JAVA基础
https://data-flair.training/blogs/design-patterns-in-java/
J2EE design patterns
https://stackabuse.com/java-j2ee-design-patterns/

关于java字节码的处理，目前有很多工具，如javassist，bcel，asm,cglib，以及jdk6引入的JavaCompiler等。

其中，CGLib的底层基于ASM实现，是一个高效高性能的生成库；而ASM是一个轻量级的类库，但需要涉及到JVM的操作和指令。这些实现都需要直接跟虚拟机指令打交道。如果你不想了解虚拟机指令。

javassist是jboss的一个子项目，其主要的优点，在于简单，而且快速。直接使用java编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构，或者动态生成类。如果你不想了解虚拟机指令，可以采用javassist。

另外JDK6引入的JavaCompiler类，也可以帮助我们动态生成字节码对象。

很多框架都使用了动态字节码技术，例如mybatis，hibernate，spring，Struts2，dubbo等


1）JDK动态代理：

具体实现原理：

1、通过实现InvocationHandlet接口创建自己的调用处理器

2、通过为Proxy类指定ClassLoader对象和一组interface来创建动态代理

3、通过反射机制获取动态代理类的构造函数，其唯一参数类型就是调用处理器接口类型

4、通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数参入

JDK动态代理是面向接口的代理模式，如果被代理目标没有接口那么Spring也无能为力，

Spring通过java的反射机制生产被代理接口的新的匿名实现类，重写了其中AOP的增强方法。


2、CGLib动态代理

CGLib是一个强大、高性能的Code生产类库，可以实现运行期动态扩展java类，Spring在运行期间通过 CGlib继承要被动态代理的类，重写父类的方法，实现AOP面向切面编程呢。


两者对比：

JDK动态代理是面向接口，在创建代理实现类时比CGLib要快，创建代理速度快。

CGLib动态代理是通过字节码底层继承要代理类来实现（如果被代理类被final关键字所修饰，那么抱歉会失败），在创建代理这一块没有JDK动态代理快，但是运行速度比JDK动态代理要快。

使用注意：

如果要被代理的对象是个实现类，那么Spring会使用JDK动态代理来完成操作（Spirng默认采用JDK动态代理实现机制）

如果要被代理的对象不是个实现类那么，Spring会强制使用CGLib来实现动态代理


https://blog.csdn.net/zhangjg_blog/article/details/19996629


它们都是通过字节码生成来实现动态代理的。只不过是它们生成的字节码不一样，像JDK，CGLIB都考虑了很多因素，以及继承或包装了自己的一些类，所以生成的字节码非常大，而我们很多时候用不上这些，手工生成的字节码非常小（Javassist是手工生成的字节码），所以速度快。

       另外，ASM也是手工生成的字节码，速度也很快，但是它没有一个数量级，通常情况下选用Javassist生成字节码的方式。

 

        另外，从严格意义上将Aspectj不能算动态代理，应该是静态代理，因为它采用的是编译器植入。用aspectj，需要写相应的xml，定义切面，织入点等，然后由aspectj的编译器来编译出新的字节码文件，这明显是静态代理。
